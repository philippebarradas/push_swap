void fillpb_first_med(t_p *p, int div)
{
	p->val_med_a = find_val_med(p, div);
	p->val_med_b = find_val_med_in_b(p, div);
	while (no_val_med_in_a(p, p->val_med_a) == ERROR && p->lena >= 0 && pa_opti_fill(p) == ERROR)
	{
		p->val_med_b = find_val_med_in_b(p, div);
		if (p->pa[p->lena] < p->val_med_a)
			pb(p, 0);
		else if ( (p->pa[0] < p->val_med_a)  && (pp_g(p->pb, p->lenb, p->val_med_b) <= pp_d(p->pb, p->lenb, p->val_med_b)) )
			rrr(p, 1);
		else if (p->pa[0] < p->val_med_a)
			rra(p, 0);
		else if ( (p->pa[0] >= p->val_med_a)  && (pp_g(p->pb, p->lenb, p->val_med_b) > pp_d(p->pb, p->lenb, p->val_med_b)) )
			rr(p, 1);
		else
			ra(p, 0);
		if (no_val_med_in_a(p, p->val_med_a) == SUCCESS)
			p->val_med_a = find_val_med(p, div);
	}
	//else if (pp_g(p->pb, p->lenb, val_med_b) > pp_d(p->pb, p->lenb, val_med_b))
	//	rr(p, 1);
}


void	fillpa_sec_med(t_p *p, int div)
{
	while (is_sort(p) == ERROR && p->lenb > 0 && pb_opti_fill(p) == ERROR)
	{
		p->val_med_b = find_val_med_in_b(p, div);
		while (no_val_med_in_b(p, p->val_med_b) == ERROR && pb_opti_fill(p) == ERROR)
		{
			p->val_med_a = find_val_med(p, div);
			if (p->pb[p->lenb] >= p->val_med_b)
				pa(p, 0);
			else if ( (pp_g(p->pb, p->lenb, p->val_med_b) <= pp_d(p->pb, p->lenb, p->val_med_b)) && (p->pa[0] < p->val_med_a))
				rrr(p, 1);
			else if (pp_g(p->pb, p->lenb, p->val_med_b) <= pp_d(p->pb, p->lenb, p->val_med_b))
				rrb(p, 0);
			else if ( (pp_g(p->pb, p->lenb, p->val_med_b) > pp_d(p->pb, p->lenb, p->val_med_b)) && (p->pa[0] >= p->val_med_a))
				rr(p, 1);
			else
				rb(p, 0);
		}
	}
}